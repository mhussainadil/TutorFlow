<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href=
  "/uploads/tutorflow-img.webp"
          type="image/x-icon"  class="rounded-full"/>
  <title>Student Dashboard - TutorFlow</title>
  <!-- <script src="https://cdn.tailwindcss.com"></script> -->
  <link href="/css/output.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="/socket.io/socket.io.js"></script> 
<style>
  
  /* Add to your CSS */
.photo-upload-trigger:hover .camera-overlay {
  opacity: 1;
}
.status-available {
      color: #10B981;
    }

    .status-busy {
      color: #F59E0B;
    }

    .status-unavailable {
      color: #EF4444;
    }
/* Add to your style section */
.notification-badge {
  transition: opacity 0.2s;
}

#notifications-menu {
  
  position: fixed;
  top:50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0.95);
  width: 95%;
  max-width: 640px;
  border-radius: 1rem;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  min-width: 300px;
  max-height: 70vh;
  overflow-y: auto;
  /* box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); */
}

.notification-item {
  transition: background-color 0.2s;
}
</style>


<script>

    let profileMenuOpen = false;
  // Toggle notifications dropdown
// Update the toggleNotifications function
function toggleNotifications() {
  const menu = document.getElementById('notifications-menu');
  menu.classList.toggle('hidden');
  
  // Close other open menus
  document.getElementById('profile-menu').classList.add('hidden');
}




// Close notifications when clicking outside
document.addEventListener('click', (e) => {
  const notificationsButton = document.querySelector('[onclick="toggleNotifications()"]');
  const notificationsMenu = document.getElementById('notifications-menu');
  
  if (!notificationsButton.contains(e.target) && !notificationsMenu.contains(e.target)) {
    notificationsMenu.classList.add('hidden');
  }
});


// Mark all as read with confirmation
async function markAllAsRead() {
  try {
    const response = await fetch('/notifications/mark-read', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (response.ok) {
      document.querySelectorAll('.notification-item').forEach(item => {
        item.classList.remove('bg-indigo-50');
      });
      document.querySelector('.notification-badge').classList.add('hidden');
    }
  } catch (error) {
    console.error('Error:', error);
  }
}

let eventSource;

function setupSSE() {
  if (typeof EventSource !== 'undefined') {
    eventSource = new EventSource('/notifications/stream');

    eventSource.onmessage = (event) => {
      const data = JSON.parse(event.data);
      const badge = document.querySelector('.notification-badge');
      
      if (data.unreadCount > 0) {
        badge.classList.remove('hidden');
        badge.textContent = data.unreadCount > 9 ? '9+' : data.unreadCount;
      } else {
        badge.classList.add('hidden');
      }
    };

    eventSource.onerror = (error) => {
      console.error('SSE Error:', error);
      eventSource.close();
      setTimeout(setupSSE, 5000); // Reconnect after 5 seconds
    };
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', setupSSE);
// //////////////////
document.addEventListener('DOMContentLoaded', () => {
  
    const socket = io();

    socket.on("connect", () => {
      console.log("Connected to server");
      // When the user is authenticated, send their user ID to the server
      socket.emit('register', `<%=user._id%>`);
    });

    socket.on("disconnect", () => {
      console.log("Disconnected from server");
    });
  });
</script>
</head>

<body class="bg-gray-50">
  <!-- Enhanced Header -->
  <header class="bg-indigo-50 shadow-sm fixed w-full z-40">
    <nav class="px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <!-- Mobile Menu Button -->
        <div class="flex items-center lg:hidden">
          <button onclick="toggleSidebar()" class="p-2 text-indigo-600 hover:text-indigo-800">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>

        <div class="flex items-center">
          <a href="/dashboard" class="text-2xl font-bold text-indigo-600">TutorFlow</a>
        </div>
        <div id="modal-backdrop" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 transition-opacity"></div>

        <!-- Student Profile Modal -->
        <div id="profile-modal" class="hidden fixed inset-0 flex items-center justify-center z-50 p-4">
          <div class="bg-white rounded-xl shadow-2xl w-full max-w-2xl">
            <div
              class="bg-indigo-50 px-6 py-4 rounded-t-xl flex justify-between items-center border-b border-indigo-100">
              <h2 class="text-xl font-semibold text-indigo-900">Student Profile</h2>
              <button onclick="closeProfileModal()" class="text-indigo-600 hover:text-indigo-800 transition-colors">
                <i class="fas fa-times text-lg"></i>
              </button>
            </div>

            <div class="p-6">
              <div class="flex flex-col md:flex-row gap-6">
                <div class="w-full md:w-1/3 flex flex-col items-center">
                  <!-- <form id="studentPhotoForm " enctype="multipart/form-data" class="relative group">
        
                    <div class="relative photo-upload-trigger cursor-pointer">
                      <input type="file" id="studentPhotoInput" name="photo" hidden accept="image/*">
                      <img src="<%= user.profilePhoto %>"
                        class="student-preview-image w-32 h-32 rounded-full object-cover border-4 border-indigo-100 shadow-lg">
                      <div
                        class="camera-overlay absolute inset-0 bg-black bg-opacity-40 rounded-full flex items-center justify-center opacity-0 transition-opacity duration-200">
                        <i class="fas fa-camera text-white text-2xl"></i>
                      </div>
                    </div>
                    <p class="text-sm text-gray-600 mt-3 text-center cursor-pointer photo-upload-trigger">Edit Photo</p>
       
                  </form> -->

                  <form id="studentPhotoForm" enctype="multipart/form-data" class="relative group">
                    <div class="relative photo-upload-trigger cursor-pointer">
                      <input type="file" id="studentPhotoInput" name="photo" hidden accept="image/*">
                      <img src="<%= user.profilePhoto %>" 
                           onerror="this.onerror=null;this.src='/uploads/default-avatar.jpg';"
                           class="student-preview-image w-32 h-32 rounded-full object-cover border-4 border-indigo-100 shadow-lg">
                      <div class="camera-overlay absolute inset-0 bg-black bg-opacity-40 rounded-full flex items-center justify-center opacity-0 transition-opacity duration-200">
                        <i class="fas fa-camera text-white text-2xl"></i>
                      </div>
                    </div>
                    <input type="text" name="editedName" id="editedName" class="hidden" value="<%= user.fullName %>">
                    <p class="text-sm text-gray-600 mt-3 text-center cursor-pointer photo-upload-trigger">Edit Photo</p>
                  </form>
                  

                </div>

                <div class="w-full md:w-2/3 space-y-4">
                  <div>
                    <!-- <h1 class="text-2xl font-bold text-indigo-900">
                      <%= user.fullName %>
                    </h1> -->
                    <!-- Update name display section -->
                    <div class="flex items-center gap-2 group">
                      <h1 id="fullNameDisplay" class="text-2xl font-bold text-indigo-900">
                        <%= user.fullName %>
                      </h1>
                      <button onclick="toggleNameEdit()" class="opacity-0 group-hover:opacity-100 transition-opacity">
                        <i class="fas fa-edit text-sm text-indigo-600 hover:text-indigo-800"></i>
                      </button>
                    </div>
                    <input type="text" id="fullNameInput" name="fullName"
                      class="hidden absolute bg-white p-2 border rounded-lg shadow-sm" value="<%= user.fullName %>">
                    <p class="text-sm pt-4 text-indigo-600">Student</p>
                  </div>

                  <div class="space-y-2">
                    <div class="flex items-center">
                      <i class="fas fa-id-card text-indigo-600 w-6"></i>
                      <span class="text-gray-700">
                        <%= user.rollNo %>
                      </span>
                    </div>
                    <div class="flex items-center">
                      <i class="fas fa-university text-indigo-600 w-6"></i>
                      <span class="text-gray-700">
                        <%= user.department %>
                      </span>
                    </div>
                    <div class="flex items-center">
                      <i class="fas fa-calendar-alt text-indigo-600 w-6"></i>
                      <span class="text-gray-700">Year <%= user.yearOfStudy %> - Semester <%= user.semester %></span>
                    </div>
                    <div class="flex items-center">
                      <i class="fas fa-envelope text-indigo-600 w-6"></i>
                      <span class="text-gray-700">
                        <%= user.email %>
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <div class="mt-6 flex justify-end gap-3 border-t border-indigo-100 pt-4">
                <button onclick="closeProfileModal()"
                  class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors">
                  Cancel
                </button>
                <button onclick="saveStudentProfile()"
                  class="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors flex items-center">
                  <i class="fas fa-save mr-2"></i>
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Notifications and Profile -->
  

        <div class="flex items-center space-x-4">
          <!-- <div class="relative"> -->
            <button onclick="toggleNotifications()" class="p-2 text-indigo-600 hover:text-indigo-800 relative">
              <i class="fas fa-bell text-xl"></i>
              <% if (unreadCount > 0) { %>
                <span class="notification-badge absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full"></span>
              <% } %>
            </button>
            <div id="notifications-menu" class="hidden absolute right-6 top-4 mt-2 bg-indigo-50 w-64  rounded-lg shadow-lg py-2 z-50">
              <div class="px-4 py-2 text-sm font-semibold text-indigo-900 border-b">Notifications</div>
              <div class="max-h-60 overflow-y-auto">
                <% if (notifications.length === 0) { %>
                  <p class="px-4 py-2 text-gray-500 text-sm">No notifications</p>
                <% } else { %>
                  <% notifications.forEach(notification => { %>
                    <div class="px-4 py-2 hover:bg-indigo-50 <%= !notification.read ? 'bg-indigo-50' : '' %>">
                      <p class="text-sm text-gray-700">
                        <% if (notification.recipientModel === 'Student') { %>
                          <i class="fas fa-chalkboard-teacher mr-2 text-indigo-600"></i>
                        <% } else { %>
                          <i class="fas fa-user-graduate mr-2 text-indigo-600"></i>
                        <% } %>
                        <%= notification.message %>
                      </p>
                      <div class="text-xs text-gray-500 mt-1 flex justify-between">
                        <span>
                          <i class="fas fa-clock mr-1"></i>
                          <%= moment(notification.createdAt).fromNow() %>
                        </span>
                        <% if (notification.relatedAppointment) { %>
                          <a href="/appointments/<%= notification.relatedAppointment._id %>" class="text-indigo-600 hover:underline">
                            View
                          </a>
                        <% } %>
                      </div>
                    </div>
                  <% }); %>
                <% } %>
              </div>
              <div class="border-t px-4 py-2">
                <!-- <a href="/notifications" class="text-indigo-600 text-sm hover:underline">View all</a> -->
                <button onclick="markAllAsRead()" class="float-right text-gray-500 text-sm hover:text-indigo-600">
                  Mark all read
                </button>
              </div>
            </div>
            
            <div class="relative">
              <button aria-label="Profile menu" onclick="toggleProfileMenu(event)"
                class="flex items-center focus:outline-none ring-2 ring-indigo-100 rounded-full">
  
                <img src="<%= user.profilePhoto %>" onerror="this.onerror=null;this.src='/uploads/default-avatar.png';"
                  class="w-10 h-10 rounded-full object-cover">
  
              </button>
  
              <div id="profile-menu" class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 hidden z-50">
                <a href="#" onclick="openProfileModal()"
                  class="flex items-center px-4 py-2 text-gray-700 hover:bg-indigo-50">
                  <i class="fas fa-user mr-2 text-sm"></i>Profile
                </a>
  
                <a href="/settings" class="flex items-center px-4 py-2 text-gray-700 hover:bg-indigo-50">
                  <i class="fas fa-cog mr-2 text-sm"></i>Settings
                </a>
                <form action="/logout" method="POST" class="border-t border-gray-100">
                  <button type="submit" class="w-full flex items-center px-4 py-2 text-gray-700 hover:bg-indigo-50">
                    <i class="fas fa-sign-out-alt mr-2 text-sm"></i>Logout
                  </button>
                </form>
              </div>
            </div>
          <!-- </div> -->
      

         
        </div>
      </div>
    </nav>
  </header>
  <aside id="sidebar"
    class="w-64 h-screen bg-gradient-to-b from-indigo-50 to-indigo-100 fixed p-6 transform -translate-x-full lg:translate-x-0 transition-transform duration-200 ease-in-out z-30 border-r border-indigo-200">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-indigo-800 text-2xl font-bold">TutorFlow</h1>
      <button onclick="toggleSidebar()" class="lg:hidden text-indigo-600">
        <i class="fas fa-times"></i>
      </button>
    </div>

    <nav class="space-y-2">
      <a href="/dashboard"
        class="flex items-center text-indigo-800 p-3 rounded-lg <%= currentPage === 'dashboard' ? 'bg-indigo-100 border border-indigo-200' : 'hover:bg-indigo-50' %>">
        <i class="fas fa-home mr-3 text-indigo-600"></i>
        Dashboard
      </a>
      <a href="/studviewfaculty" class="flex items-center text-indigo-800 p-3 rounded-lg  border   hover:bg-indigo-50 ">
        <i class="fas fa-users mr-3 text-indigo-600"></i>
        Faculty List
      </a>
    </nav>

    <div class="absolute bottom-6 left-0 right-0 px-6">
      <a href="/settings" class="flex items-center text-indigo-800 p-3 rounded-lg hover:bg-indigo-50">
        <i class="fas fa-cog mr-3 text-indigo-600"></i>
        Settings
      </a>
      <form action="/logout" method="POST"
        class="flex items-center text-indigo-800 w-full p-3 rounded-lg hover:bg-indigo-50">
        <button type="submit" class="flex items-center">
          <i class="fas fa-sign-out-alt mr-3 text-indigo-600"></i>
          Logout
        </button>
      </form>
    </div>
  </aside>
  <!-- Main Content with Adjusted Spacing -->
  <main id="main-content"
    class="flex-1 p-8 pt-24 lg:ml-64 lg:pt-20 min-h-screen transition-margin duration-200 ease-in-out">
    <!-- Content remains same -->
    <div class="max-w-5xl mx-auto">
      <!-- Welcome Header -->
      <div class="mb-8">
        <h2 class="text-3xl font-bold text-indigo-900">Welcome, <%= user.fullName %>
        </h2>
        <p class="text-gray-600 mt-2">Your upcoming learning sessions</p>
      </div>

      <% if (appointments.length===0) { %>
        <!-- Empty State -->
        <div class="text-center py-20">
          <div class="max-w-md mx-auto">
            <div class="mb-8 text-indigo-600">
              <i class="fas fa-calendar-plus text-6xl"></i>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 mb-4">No upcoming appointments</h3>
            <a href="/studviewfaculty"
              class="inline-block bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors">
              Book New Appointment
            </a>
          </div>
        </div>
        <% } else { %>
          <!-- Appointments List -->
          <div class="bg-white rounded-xl shadow-lg overflow-hidden">
            <div class="px-6 py-5 border-b border-gray-200 bg-indigo-50">
              <h3 class="text-lg font-semibold text-indigo-900">Upcoming Sessions</h3>
            </div>

            <div class="divide-y divide-gray-200">
              <% appointments.forEach(appointment=> { %>
                <div class="p-6 hover:bg-gray-50 transition-colors">
                  <div class="flex items-center justify-between">
                    <div>
                      <h4 class="font-semibold text-gray-900">Appointment with <%= appointment.facultyDetails.name %>
                      </h4>
                      <p class="text-gray-600 text-sm mt-1">
                        <i class="fas fa-calendar-day mr-2"></i>
                        <%= appointment.date.toString().slice(0,16) %> at <%= appointment.time %>
                      </p>
                      <div class="mt-3 p-2 text-gray-600 text-lg">
                        <i class="fas fa-comment mr-2"></i>
                        Reason : <%= appointment.message %>
                      </div>
                     <!--    <span
                      class="inline-block px-3 py-1 m-4 text-sm rounded-full    <%= appointment.status === 'approved' ? 'bg-green-100 text-green-800' : 
                               appointment.status === 'rejected' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800' %> 
                                <%= appointment.status === 'Confirmed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800' %>">
                        <%= appointment.status %>
                      </span> -->
                      <span class="inline-block px-3 py-1 m-4 text-sm rounded-full 
       <%= appointment.status === 'approved' ? 'bg-green-100 text-green-800' : 
          appointment.status === 'rejected' ? 'bg-red-100 text-red-800' : 
          'bg-yellow-100 text-yellow-800' %>">
  <%= appointment.status %>
</span>
                    </div>
                    <div class="flex items-center space-x-4">
                 
                    </div>
                  </div>
                </div>
                <% }) %>
            </div>
          </div>
          <% } %>
    </div>
  </main>
  <script>

    function toggleProfileMenu(event) {
      event.stopPropagation();
      const menu = document.getElementById('profile-menu');
      menu.classList.toggle('hidden');
      profileMenuOpen = !menu.classList.contains('hidden');
    }

    //  menu item click handler
    document.querySelectorAll('#profile-menu a, #profile-menu button').forEach(item => {
      item.addEventListener('click', () => {
        document.getElementById('profile-menu').classList.add('hidden');
        profileMenuOpen = false;
      });
    });
    
//  name edit functionality
function toggleNameEdit() {
  const display = document.getElementById('fullNameDisplay');
  const input = document.getElementById('fullNameInput');
  
  if (input.classList.contains('hidden')) {
    input.style.left = `${display.offsetLeft}px`;
    input.style.top = `${display.offsetTop}px`;
    input.classList.remove('hidden');
    input.focus();
  } else {
    input.classList.add('hidden');
  }
}

    function toggleSidebar() {
      const sidebar = document.getElementById('sidebar');
      const content = document.getElementById('main-content');
      sidebar.classList.toggle('-translate-x-full');
      content.classList.toggle('lg:ml-64');
    }

    function toggleProfileMenu(event) {
      event.stopPropagation();
      const menu = document.getElementById('profile-menu');
      profileMenuOpen = !profileMenuOpen;
      menu.classList.toggle('hidden', !profileMenuOpen);
    }

    // Close profile menu when clicking outside
    document.addEventListener('click', (e) => {
      const menu = document.getElementById('profile-menu');
      const profileBtn = document.querySelector('[aria-label="Profile menu"]');

      if (!profileBtn.contains(e.target) && !menu.contains(e.target)) {
        menu.classList.add('hidden');
        profileMenuOpen = false;
      }
    });
    function openProfileModal() {
      document.getElementById('profile-modal').classList.remove('hidden');
      document.getElementById('modal-backdrop').classList.remove('hidden');
    }

    function closeProfileModal() {
      document.getElementById('profile-modal').classList.add('hidden');
      document.getElementById('modal-backdrop').classList.add('hidden');
    }

    // Handle photo upload preview
    document.addEventListener('DOMContentLoaded', () => {
      const photoInput = document.getElementById('studentPhotoInput');
      const previewImage = document.querySelector('.student-preview-image');

      photoInput.addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            previewImage.src = e.target.result;
          }
          reader.readAsDataURL(file);
        }
      });
    });
  
    async function saveStudentProfile() {
  const form = document.getElementById('studentPhotoForm');
  const fullNameInput = document.getElementById('fullNameInput');
  const editedNameInput = document.getElementById('editedName');

  // Update the hidden input value with the edited name
  if (fullNameInput.value.trim() !== '') {
    editedNameInput.value = fullNameInput.value.trim();
  }

  const formData = new FormData(form);
  
  try {
    const response = await fetch('/update-profile', {
      method: 'POST',
      body: formData
    });
    
    if (response.ok) {
      location.reload();
    } else {
      console.error('Profile update failed');
    }
  } catch (error) {
    console.error('Error:', error);
  }
}

// Initialize photo upload triggers
document.addEventListener('DOMContentLoaded', () => {
  // Trigger file input when clicking on photo area
  document.querySelectorAll('.photo-upload-trigger').forEach(element => {
    element.addEventListener('click', (e) => {
      document.getElementById('studentPhotoInput').click();
    });
  });
  // Handle file selection
  const photoInput = document.getElementById('studentPhotoInput');
  const previewImage = document.querySelector('.student-preview-image');
  
  photoInput.addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        previewImage.src = e.target.result;
      }
      reader.readAsDataURL(file);
    }
  });
});
  </script>
  <!-- Toast Notification Container -->
<div id="toast" class="hidden fixed bottom-4 right-4 bg-indigo-600 text-white px-6 py-3 rounded-lg shadow-lg transition-opacity duration-300">
  <div class="flex items-center">
    <i class="fas fa-bell mr-3"></i>
    <span id="toast-message"></span>
  </div>
</div>

<script>
  // Toast notification system
  function showToast(message, duration = 3000) {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    toastMessage.textContent = message;
    toast.classList.remove('hidden');
    setTimeout(() => toast.classList.add('hidden'), duration);
  }

  // Show login notification
  document.addEventListener('DOMContentLoaded', () => {
    `<% if (user && unreadCount > 0) { %>`
      showToast(`Welcome back! You have <%= unreadCount %> unread notifications.`);
   ` <% } else if (user) { %>
      showToast('Welcome back to TutorFlow!');
    <% } %>`
  });
</script>
</body>
</html>
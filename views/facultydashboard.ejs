<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href=
  "/uploads/tutorflow-img.webp"
          type="image/x-icon"  class="rounded-full"/>
  <title>Faculty Dashboard - TutorFlow</title>
  <!-- <script src="https://cdn.tailwindcss.com"></script> -->
  <link href="/css/output.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="/socket.io/socket.io.js"></script>
  <style>
    @keyframes modalIn {
      to {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
        display: block;
      }
    }

    .status-led {
      width: 15px;
      height: 15px;
      border-radius: 50%;
      display: inline-block;
      box-shadow: 0 0 4px currentColor;
      animation: pulse 2s infinite;
      padding: 0 0.5rem;
      background-color: currentColor;
    }

    @keyframes pulse {
      0% {
        opacity: 0.8;
      }

      50% {
        opacity: 0.3;
        box-shadow: 2px 3px 8px white;
      }

      100% {
        opacity: 0.8;
      }
    }

    .status-available {
      color: #10B981;
    }

    .status-busy {
      color: #F59E0B;
    }

    .status-unavailable {
      color: #EF4444;
    }


    .profile-preview-image {
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .profile-preview-image:hover {
      transform: scale(1.05);
    }

    .camera-overlay {
      pointer-events: none;
      /* Allow clicks through overlay */
    }
/* 
    .profile-modal {
      z-index: 9999;
      
    }

    #profile-backdrop {
      z-index: 9998;
    } */

    .profile-modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0.95);
  width: 95%;
  max-width: 640px;
  background: white;
  border-radius: 1rem;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  opacity: 0;
  transition: all 0.3s ease-in-out;
  z-index: 1000;
  display: none;
}

.profile-modal.active {
  display: block;
  opacity: 1;
  transform: translate(-50%, -50%) scale(1);
}

#profile-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
  z-index: 999;
  display: none;
}

#profile-backdrop.active {
  display: block;
  opacity: 1;
}

.notification-item {
      transition: all 0.2s ease;
    }
    
    .notification-item:hover {
      transform: translateX(-10px);
    }
    
    .toast {
      animation: slideIn 0.3s ease, fadeOut 0.5s ease 10s forwards;
    }
    
    @keyframes slideIn {
      from { transform: translateY(-100%); }
      to { transform: translateY(0); }
    }
    
    @keyframes fadeOut {
      to { opacity: 0; }
    }

.notification-counter {
  font-size: 0.7rem;
  line-height: 1;
  top: -0.25rem;
  right: -0.25rem;
}



#notification-menu {
  max-height: 70vh;
  overflow-y: auto;
  position: fixed;
  top:50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0.95);
  width: 95%;
  max-width: 640px;
  background:rgb(238 242 255 / var(--tw-bg-opacity));
  border-radius: 1rem;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);

}

.toast {
  min-width: 300px;
  animation: slideIn 0.3s ease, fadeOut 0.5s ease 10s forwards;
}

@keyframes slideIn {
  from { transform: translateY(-20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}
.toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
  }

  .toast {
    padding: 1rem;
    margin-bottom: 1rem;
    background: white;
    border-left: 4px solid #4F46E5;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    animation: slideIn 0.3s, fadeOut 0.3s 9s forwards;
  }
  </style>
<script>
      // Initialize socket after DOM loads
      document.addEventListener('DOMContentLoaded', () => {
        const socket = io();
        
        // Authentication
        socket.emit('authenticate', '<%= user._id %>');
    
        // Global socket reference
        window.appSocket = socket;
    
        // Socket event handlers
        socket.on('notification', (data) => {
          showToast(data.message);
          updateNotificationCounter(data.unreadCount);
        });
      });
    
</script>

</head>
<body class="bg-gray-50">

<div id="toast-container" class="toast-container"></div>
  <!-- Profile Modal Backdrop -->
  <div id="profile-backdrop" class="fixed hidden inset-0 bg-black/50 backdrop-blur-sm z-40 "></div>
  <!-- Header -->
  <header class="bg-indigo-50 shadow-sm fixed w-full z-40">
    <nav class="px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <div class="flex items-center lg:hidden">
          <button onclick="toggleSidebar()" class="p-2 text-indigo-600 hover:text-indigo-800">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>

        <div class="flex items-center">
          <a href="/f/session" class="text-2xl font-bold text-indigo-600">TutorFlow</a>
        </div>

        <div class="flex items-center space-x-4">
          <!-- <button class="p-2 text-indigo-600 hover:text-indigo-800 relative">
            <i class="fas fa-bell text-xl"></i>
            <span class="absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full"></span>
          </button> -->
<!-- Update the bell button in the header -->
<button onclick="toggleNotificationsMenu(event)" class="p-2 text-indigo-600 hover:text-indigo-800 relative">
  <i class="fas fa-bell text-xl"></i>
  <% if (unreadCount > 0) { %>
    <span class="notification-counter absolute top-0 right-0 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
      <%= unreadCount %>
    </span>
  <% } else { %>
    <span class="notification-counter absolute top-0 right-0 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center hidden"></span>
  <% } %>
</button>
          <div class="relative">
            <button aria-label="Profile menu" onclick="toggleProfileMenu(event)"
              class="flex items-center focus:outline-none ring-2 ring-indigo-100 rounded-full">
              <img src="<%= user.photo %>" class="w-10 h-10 rounded-full object-cover">
            </button>

            <div id="profile-menu" class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 hidden z-50">
              <a href="#"  onclick="showProfileModal()"
                class="flex items-center px-4 py-2 text-gray-700 hover:bg-indigo-50">
                <i class="fas fa-user mr-2 text-sm"></i>Profile
              </a>
              <a href="/fsettings" class="flex items-center px-4 py-2 text-gray-700 hover:bg-indigo-50">
                <i class="fas fa-cog mr-2 text-sm"></i>Settings
              </a>
              <form action="/logout" method="POST" class="border-t border-gray-100">
                <button type="submit" class="w-full flex items-center px-4 py-2 text-gray-700 hover:bg-indigo-50">
                  <i class="fas fa-sign-out-alt mr-2 text-sm"></i>Logout
                </button>
              </form>
            </div>
          </div>

          <!-- Notifications Dropdown -->
<div id="notification-menu" class="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg py-2 hidden z-50">
  <div class="px-4 py-3 border-b border-gray-200">
    <h3 class="text-lg font-semibold text-indigo-900">Notifications</h3>
  </div>
  <div class="max-h-96 overflow-y-auto">
    <!-- <% notifications.forEach(notification => { %>
      <a href="/notifications" class="flex items-center px-4 py-3 hover:bg-indigo-50 transition-colors">
        <div class="flex-1">
          <p class="text-sm text-gray-700"><%= notification.message %></p>
          <p class="text-xs text-gray-500 mt-1"><%= new Date(notification.createdAt).toLocaleString() %></p>
        </div>
        <% if (!notification.read) { %>
          <span class="w-2 h-2 bg-indigo-500 rounded-full ml-2"></span>
        <% } %>
      </a>
    <% }) %> -->
    <% notifications.forEach(notification => { %>
      <div class="p-6 border-b border-gray-100 notification-item">
        <div class="flex items-start">
          <div class="flex-1">
            <p class="text-gray-700">
              <% if (user.role === 'student') { %>
                <%= notification.faculty.name %>: 
              <% } else { %>
                <%= notification.student.fullName %>: 
              <% } %>
              <%= notification.message %>
            </p>
            <p class="text-sm text-gray-500 mt-2">
              <i class="fas fa-clock mr-2"></i>
              <%= new Date(notification.createdAt).toLocaleString() %>
            </p>
          </div>
          <% if (!notification.read) { %>
            <span class="w-2 h-2 bg-indigo-500 rounded-full ml-4"></span>
          <% } %>
        </div>
      </div>
    <% }) %>
  </div>
 
</div>
        </div>
      </div>
    </nav>
  </header>
  <!-- Sidebar -->
  <aside id="sidebar"
    class="w-64 h-screen bg-gradient-to-b from-indigo-50 to-indigo-100 fixed p-6 transform -translate-x-full lg:translate-x-0 transition-transform duration-200 ease-in-out z-30 border-r border-indigo-200">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-indigo-800 text-2xl font-bold">TutorFlow</h1>
      <button onclick="toggleSidebar()" class="lg:hidden text-indigo-600">
        <i class="fas fa-times"></i>
      </button>
    </div>

    <nav class="space-y-2">
      <a href="/f/session"
        class="flex items-center text-indigo-800 p-3 rounded-lg <%= currentPage === 'dashboard' ? 'bg-indigo-100 border border-indigo-200' : 'hover:bg-indigo-50' %>">
        <i class="fas fa-home mr-3 text-indigo-600"></i>
        Dashboard
      </a>
      <a href="/fsettings" class="flex items-center text-indigo-800 p-3 rounded-lg hover:bg-indigo-50">
        <i class="fas fa-cog mr-3 text-indigo-600"></i>
        Settings
      </a>
      <form action="/logout" method="POST"
        class="flex items-center text-indigo-800 w-full p-3 rounded-lg hover:bg-indigo-50">
        <button type="submit" class="flex items-center">
          <i class="fas fa-sign-out-alt mr-3 text-indigo-600"></i>
          Logout
        </button>
      </form>
    </nav>

    <div class="absolute bottom-6 left-0 right-0 px-6">
     
    </div>
  </aside>

  <!-- Main Content -->
  <main id="main-content"
    class="flex-1 p-8 pt-24 lg:ml-64 lg:pt-20 min-h-screen transition-margin duration-200 ease-in-out">
    <div class="max-w-5xl mx-auto">
      <div class="mb-8">
        <h2 class="text-3xl font-bold text-indigo-900">Welcome, <%= user.name %>
        </h2>
        <p class="text-gray-600 mt-2">Your recent appointment requests</p>
      </div>

      <% if (requests.length===0) { %>
        <div class="text-center py-20">
          <div class="max-w-md mx-auto">
            <div class="mb-8 text-indigo-600">
              <i class="fas fa-calendar-check text-6xl"></i>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 mb-4">No pending requests</h3>
            <p class="text-gray-600">New requests will appear here when students book appointments</p>
          </div>
        </div>
        <% } else { %>
          <div class="bg-white rounded-xl shadow-lg overflow-hidden">
            <div class="px-6 py-5 border-b border-gray-200 bg-indigo-50">
              <h3 class="text-lg font-semibold text-indigo-900">Pending Requests (<%= requests.filter(r=> r.status ===
                  'pending').length %>)</h3>
            </div>

            <div class="divide-y divide-gray-200">
              <% requests.forEach(request=> { %>
                <div class="p-6 hover:bg-gray-50 transition-colors">
                  <div class="flex items-center justify-between">
                    <div>
                      <h4 class="font-semibold text-gray-900">Applicant: <%= request.studentDetails.fullName %> (<%=
                            request.studentDetails.rollNo %>)</h4>
                      <p class="text-gray-600 text-sm mt-1 p-3">
                        <i class="fas fa-calendar-day mr-2"></i>
                        <%= request.date.toString().slice(0,16) %> at <%= request.time %>
                      </p>
                      <span
                        class="mt-2 inline-block px-3 py-1 text-sm rounded-full 
                              <%= request.status === 'approved' ? 'bg-green-100 text-green-800' : 
                                 request.status === 'rejected' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800' %>">
                        <%= request.status.charAt(0).toUpperCase() + request.status.slice(1) %>
                      </span>
                    </div>
                    <div class="flex items-center space-x-4">
                    <% if (request.status === 'approved' && new Date(request.date) < new Date()) { %>
                      <form action="/complete/<%= request.id %>" method="POST">
                        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                          Mark Completed
                        </button>
                      </form>
                    <% } %></div>
                    <% if (request.status==='pending' ) { %>
                      <div class="flex items-center space-x-4">
                        <form action="/approve/<%= request._id %>" method="POST">
                          <button type="submit"
                            class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                            Approve
                          </button>
                        </form>
                        <form action="/reject/<%= request._id %>" method="POST">
                          <button type="submit"
                            class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                            Reject
                          </button>
                        </form>
                      </div>
                      <% } else { %>
                        <div class="text-gray-500 text-sm">
                          <%= request.updatedAt.toLocaleDateString() %>
                        </div>
                        <% } %>
                  </div>
                  <% if (request.message) { %>
                    <div class="mt-3 p-2 text-gray-600 text-lg">Reason: <%= request.message %>
                    </div>
                    <% } %>
                </div>
                <% }) %>
            </div>
          </div>
          <% } %>
    </div>
  </main>

  <!-- Profile Modal -->
  <div id="profile-modal" class="profile-modal hidden">
    <div class="bg-indigo-50 px-6 py-4 rounded-t-lg flex justify-between items-center border-b border-indigo-100">
      <h2 class="text-xl font-semibold text-indigo-900">Faculty Profile</h2>
      <button onclick="closeProfileModal()" class="text-indigo-600 hover:text-indigo-800 transition-colors">
        <i class="fas fa-times text-lg"></i>
      </button>
    </div>

    <div class="p-6">
      <div class="flex flex-col md:flex-row gap-6">
 
        <div class="w-full md:w-1/3 flex flex-col items-center">
          <form id="photoForm" enctype="multipart/form-data" class="relative group">
            <input type="file" id="photoInput" name="photo" hidden accept="image/*">
            <div class="relative photo-upload-trigger">
              <img src="<%= user.photo %>"
                class="profile-photo profile-preview-image w-32 h-32 rounded-full object-cover border-4 border-indigo-100 shadow-lg">
              <div
                class="camera-overlay absolute inset-0 bg-black bg-opacity-40 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                <i class="fas fa-camera text-white text-2xl"></i>
              </div>
            </div>
                       
            <p class="text-sm text-gray-600 mt-3 text-center cursor-pointer photo-upload-trigger">Edit Photo &nbsp;&nbsp;  
           

            </p>
          </form>
        </div>
        <div class="w-full md:w-2/3 space-y-4">
          <div>
            <h1 class="text-2xl font-bold text-indigo-900">
              <%= user.name %>
            </h1>
            <p class="text-sm text-indigo-600">Faculty Member</p>
          </div>

          <div class="space-y-2">
            <div class="flex items-center">
              <i class="fas fa-university text-indigo-600 w-6"></i>
              <span class="text-gray-700">
                <%= user.department %>
              </span>
            </div>
            <div class="flex items-center">
              <i class="fas fa-book-open text-indigo-600 w-6"></i>
              <span class="text-gray-700">
                <%= user.subjects.join(', ') %></span>
            </div>
            <div class="flex items-center">
              <i class="fas fa-envelope text-indigo-600 w-6"></i>
              <span class="text-gray-700"><%= user.email %></span>
            </div>
          </div>

          <div class="pt-4">
            <h3 class="text-sm font-semibold text-indigo-900 mb-3">CURRENT STATUS</h3>
            <div class="flex flex-wrap gap-3">
              <% const statuses = [
                { value: 'available', label: 'Available' , icon: 'fa-check' , color: 'bg-emerald-100 text-emerald-800'
                  }, { value: 'busy' , label: 'Busy' , icon: 'fa-briefcase' , color: 'bg-amber-100 text-amber-800' }, {
                  value: 'unavailable' , label: 'Unavailable' , icon: 'fa-times' , color: 'bg-red-100 text-red-800' } ];
                  %>
                  <% statuses.forEach(status=> { %>
                    <button onclick="updateStatus('<%= status.value %>')"
                      class="flex items-center px-4 py-2 rounded-lg <%= status.color %> <%= user.status === status.value ? 'ring-2 ring-indigo-300' : '' %> transition-all">
                      <i class="fas <%= status.icon %> mr-2"></i>
                      <%= status.label %>
                        <% if(user.status===status.value) { %>
                          <span class="status-led ml-2 status-<%= status.value %>"></span>
                          <% } %>
                    </button>
                    <% }); %>
            </div>
          </div>
          <div class="pt-4">
            <h3 class="text-sm font-semibold text-indigo-900 mb-3">AVAILABLE TIME SLOTS</h3>
            <div class="grid grid-cols-2 gap-3">
              <% const timeOptions = ['10:00 AM', '11:00 AM', '12:00 PM', '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM', '05:00 PM']; %>

<% timeOptions.forEach(time => { %>
  <button 
    onclick="toggleTimeSlot(this)" 
    data-time="<%= time %>"
    class="time-slot-btn p-2 rounded-lg <%= user.availableSlots.includes(time) ? 'bg-indigo-600 text-white' : 'bg-indigo-100 text-indigo-700' %>"
  >
    <%= time %>
  </button>
<% }); %>
            </div>
          </div>

        </div>
      </div>

      <div class="mt-6 flex justify-end gap-3 border-t border-indigo-100 pt-4">
        <button onclick="closeProfileModal()" class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors">
          Cancel
        </button>
        <button onclick="saveChanges()"
          class="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors flex items-center">
          <i class="fas fa-save mr-2"></i>
          Save Changes
        </button>
      </div>
    </div>
  </div>

  <script>
let selectedSlots = new Set(`<%- JSON.stringify(user.availableSlots || []) %>`);
let profileMenuOpen = false;
let currentStatus = '<%= user.status %>';



// Toggle notifications menu
async function toggleNotificationsMenu(event) {
  event.stopPropagation();
  const menu = document.getElementById('notification-menu');
  menu.classList.toggle('hidden');
  
  if (!menu.classList.contains('hidden')) {
    // Mark notifications as read when menu is opened
    try {
      const response = await fetch('/notifications/mark-all-read', {
        method: 'POST'
      });
      
      if (response.ok) {
        // Update notification counter
        document.querySelector('.notification-counter').textContent = '0';
      }
    } catch (error) {
      console.error('Error marking notifications as read:', error);
    }
  }
}
// Close notifications menu when clicking outside
document.addEventListener('click', (e) => {
  const menu = document.getElementById('notification-menu');
  const btn = document.querySelector('[onclick="toggleNotificationsMenu(event)"]');
  
  if (!btn.contains(e.target) && !menu.contains(e.target)) {
    menu.classList.add('hidden');
  }
});

// Mark all as read function
async function markAllAsRead() {
  try {
    const response = await fetch('/notifications/mark-all-read', {
      method: 'POST'
    });
    
    if (response.ok) {
      window.location.reload();
    }
  } catch (error) {
    console.error('Error marking notifications as read:', error);
  }
}

    // Toast notification function
// Handle real-time notifications
socket.on('notification', (data) => {
  showToast(data.message);
  if (data.unreadCount > 0) {
    document.querySelector('.notification-counter').textContent = data.unreadCount;
  }
});

// Improved toast function
function showToast(message) {
  const container = document.getElementById('toast-container');
  const toast = document.createElement('div');
  toast.className = 'toast px-6 py-4 rounded-lg shadow-lg bg-white border-l-4 border-indigo-500 mb-2';
  toast.innerHTML = `
    <p class="text-gray-700">${message}</p>
  `;

  // Auto-remove after 10 seconds
  setTimeout(() => toast.remove(), 10000);
  container.appendChild(toast);
}
    // Example toast (call this when needed)
    // showToast('New appointment request from John Doe', 'info');



    function toggleSidebar() {
      const sidebar = document.getElementById('sidebar');
      const content = document.getElementById('main-content');
      sidebar.classList.toggle('-translate-x-full');
      content.classList.toggle('lg:ml-64');
    }

    function toggleProfileMenu(event) {
  event.stopPropagation();
  const menu = document.getElementById('profile-menu');
  profileMenuOpen = !profileMenuOpen;
  menu.classList.toggle('hidden', !profileMenuOpen);
}
    document.addEventListener('click', (e) => {
      const menu = document.getElementById('profile-menu');
      const profileBtn = document.querySelector('[aria-label="Profile menu"]');

      if (!profileBtn.contains(e.target) && !menu.contains(e.target)) {
        menu.classList.add('hidden');
        profileMenuOpen = false;
      }
    });


    // Enhanced photo input handling
    document.addEventListener('DOMContentLoaded', () => {
      const photoInput = document.getElementById('photoInput');
      const photoForm = document.getElementById('photoForm');

      // Add pointer cursor to clickable elements
      document.querySelectorAll('.cursor-pointer').forEach(el => {
        el.style.cursor = 'pointer';
      });

      // Handle both image and overlay click
      document.querySelectorAll('.photo-upload-trigger').forEach(el => {
        el.addEventListener('click', (e) => {
          e.stopPropagation();
          photoInput.click();
        });
      });
      
      photoInput.addEventListener('change', async function (e) {
        if (e.target.files && e.target.files[0]) {
          const reader = new FileReader();
          const preview = document.querySelector('.profile-preview-image');
          reader.onload = (e) => {
            preview.src = e.target.result;
          };
          reader.readAsDataURL(e.target.files[0]);
          // Upload handling
          const formData = new FormData();
          formData.append('photo', e.target.files[0]);
          const saveBtn = document.querySelector('#profile-modal button[onclick="saveChanges()"]');
          const originalText = saveBtn.innerHTML;

          try {
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Uploading...';

            const response = await fetch('/update-photo', {
              method: 'POST',
              body: formData
            });

            const data = await response.json();
            if (data.success) {
              document.querySelectorAll('img[src]').forEach(img => {
                if (img.classList.contains('profile-photo')) {
                  img.src = data.photo + '?t=' + Date.now();
                }
              });
            }
          } catch (error) {
            console.error('Upload failed:', error);
            alert('Photo upload failed. Please try again.');
          } finally {
            if (saveBtn) saveBtn.innerHTML = originalText;
          }
        }
      });
    });
    // -----Status management------
    
    
    // async function updateStatus(newStatus) {

    //   console.log(`Status changed to: ${newStatus}`);
    //   currentStatus = newStatus;
      
    //   document.querySelectorAll('[onclick^="updateStatus"]').forEach(btn => {
    //     const statusValue = btn.getAttribute('onclick').match(/'([^']+)'/)[1];
    //     btn.classList.toggle('ring-2', statusValue === newStatus);
    //     btn.classList.toggle('ring-indigo-300', statusValue === newStatus);
    //   });
    // }
async function updateStatus(newStatus) {
  console.log(`Status changed to: ${newStatus}`);
  currentStatus = newStatus;
  
  document.querySelectorAll('[onclick^="updateStatus"]').forEach(btn => {
    const statusValue = btn.getAttribute('onclick').match(/'([^']+)'/)[1];
    btn.classList.toggle('ring-2', statusValue === newStatus);
    btn.classList.toggle('ring-indigo-300', statusValue === newStatus);
    
    // Update status LED
    const led = btn.querySelector('.status-led');
    if (led) {
      led.style.display = statusValue === newStatus ? 'inline-block' : 'none';
    }
  });
}
    // Add time slot toggle function
function toggleTimeSlot(button) {
  const time = button.dataset.time;
  
  if (selectedSlots.has(time)) {
    selectedSlots.delete(time);
    button.classList.remove('bg-indigo-600', 'text-white');
    button.classList.add('bg-indigo-100', 'text-indigo-700');
  } else {
    selectedSlots.add(time);
    button.classList.add('bg-indigo-600', 'text-white');
    button.classList.remove('bg-indigo-100', 'text-indigo-700');
  }
}

    async function saveChanges() {
  try {
    const saveData = {
      status: currentStatus,
      availableSlots: Array.from(selectedSlots)
    };

    const response = await fetch('/update-availability', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(saveData)
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error || 'Failed to save changes');
    }

    // Update UI
    document.querySelectorAll('.time-slot-btn').forEach(button => {
      const time = button.dataset.time;
      const isActive = data.availableSlots.includes(time);
      button.classList.toggle('bg-indigo-600', isActive);
      button.classList.toggle('text-white', isActive);
    });

    closeProfileModal();

  } catch (error) {
    console.error('Save failed:', error);
    alert(`Error: ${error.message}`);
  }
}
    // Close profile menu when any option is clicked
    document.querySelectorAll('#profile-menu a, #profile-menu button').forEach(item => {
      item.addEventListener('click', () => {
        document.getElementById('profile-menu').classList.add('hidden');
        profileMenuOpen = false;
        console.log(`Menu item clicked: ${item.textContent.trim()}`);
      });
    });
    // Handle modal backdrop click

    document.getElementById('profile-backdrop').addEventListener('click', closeProfileModal);
socket.on('new-appointment', (data) => {
  showToast(data.message);
  updateNotificationCount();
});
async function updateNotificationCount() {
  const res = await fetch('/notifications/unread-count');
  const { count } = await res.json();
  document.querySelector('.notification-counter').textContent = count;
}

  
  socket.on('connect', () => {
    console.log('Connected to server with ID:', socket.id);
  });

  socket.on('disconnect', () => {
    console.log('Disconnected from server');
  });
    
         function showProfileModal() {
      const modal = document.getElementById('profile-modal');
      const backdrop = document.getElementById('profile-backdrop');
    
      modal.classList.remove('hidden');
      backdrop.classList.remove('hidden');
    
      
      modal.style.display = 'block';
      backdrop.style.display = 'block';
      void modal.offsetWidth;
    
      modal.classList.add('active');
      backdrop.classList.add('active');
    }
    
    function closeProfileModal() {
      const modal = document.getElementById('profile-modal');
      const backdrop = document.getElementById('profile-backdrop');
    
      modal.classList.remove('active');
      backdrop.classList.remove('active');
    
      // Add delay for animation before setting display: none
      setTimeout(() => {
        modal.style.display = 'none';
        backdrop.style.display = 'none';
        modal.classList.add('hidden');
        backdrop.classList.add('hidden');
      }, 1000);
    }
    
    
    // Show toast notification
    function showToast(message) {
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.textContent = message;
      
      const container = document.getElementById('toast-container');
      container.appendChild(toast);
    
      setTimeout(() => toast.remove(), 10000);
    }
    
    // Listen for server-sent toasts
    socket.on('toast', (data) => {
      showToast(data.message);
    });
    
    // When page loads after authentication
    socket.emit('authenticate', '<%= user._id %>'); 
    
    // Listen for notifications
    socket.on('notification', (data) => {
      showToast(data.message);
      updateNotificationCounter(data.unreadCount);
    });
    
    
    
  
    // Update counter function
    function updateNotificationCounter(count) {
      const counter = document.querySelector('.notification-counter');
      counter.textContent = count;
      counter.classList.toggle('hidden', count <= 0);
    }

// Initialize status indicators on page load
document.addEventListener('DOMContentLoaded', () => {
  // Set initial status
  updateStatus('<%= user.status %>');
  
  // Initialize time slot buttons
  document.querySelectorAll('.time-slot-btn').forEach(button => {
    const time = button.dataset.time;
    if (selectedSlots.has(time)) {
      button.classList.add('bg-indigo-600', 'text-white');
    }
  });
});

      </script>
</body>
</html>